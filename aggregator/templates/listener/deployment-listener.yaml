{{- if .Values.listener.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.name }}-listener
  labels:
    {{- include "orakl-aggregator.labels.listener" . | nindent 4 }}
spec:
  replicas: {{ .Values.listener.replicas }}
  selector:
    matchLabels:
      {{- include "orakl-aggregator.selectorLabels.listener" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.global.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "orakl-aggregator.selectorLabels.listener" . | nindent 8 }}
    spec:
      {{- with .Values.global.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.listener.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.listener.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.listener.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.listenerTag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          {{- if .Values.global.secretManager.enabled }}
          env:
            - name: NODE_ENV
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: NODE_ENV
            - name: ORAKL_NETWORK_API_URL
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: ORAKL_NETWORK_API_URL
            - name: ORAKL_NETWORK_DELEGATOR_URL
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: ORAKL_NETWORK_DELEGATOR_URL
            - name: CHAIN
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: CHAIN
            - name: HEALTH_CHECK_PORT
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: HEALTH_CHECK_PORT
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: SLACK_WEBHOOK_URL
            - name: LOG_LEVEL
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: LOG_LEVEL
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: REDIS_PORT
            - name: PROVIDER_URL
              valueFrom:
                secretKeyRef:
                  name: orakl-aggregator-secrets
                  key: PROVIDER_URL
            - name: LISTENER_PORT
              value: {{ .Values.listener.APP_PORT | default 4000 | int  }}
          {{ else }} 
          env:
            {{- toYaml .Values.global.env | nindent 12 }}
            - name: LISTENER_PORT
              value: "4000"      
            - name: HEALTH_CHECK_PORT
              value: "8080"                  
          {{ end }}

          command: ["yarn"]
          args: [start:listener:data_feed]
          ports:
          - name: watchman
            containerPort: 4000
          {{- if .Values.global.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: watchman
            initialDelaySeconds: {{ .Values.global.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.global.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.global.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /health
              port: watchman
            initialDelaySeconds: {{ .Values.global.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.global.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.listener.resources | nindent 12 }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}