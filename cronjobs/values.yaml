jobs:
  ###
  # Backup Orakl DB
  ###
  orakl-db-backup:
    image:
      repository: debian
      tag: latest
      imagePullPolicy: IfNotPresent
    schedule: "0 */6 * * *"
    failedJobHistoryLimit: 3
    successfulJobHistoryLimit: 10
    concurrencyPolicy: Allow
    restartPolicy: Never
    ttlSecondsAfterFinished: 30
    serviceAccount:
      annotations:
        iam.gke.io/gcp-serviceaccount: "orakl-db-backup@orakl-cypress-prod.iam.gserviceaccount.com"
    command: ["/bin/bash"]
    args:
      - "-c"
      - |
        echo "Step 1: Install dependencies"
        apt -y update && apt -y install curl apt-transport-https ca-certificates gnupg postgresql-client
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg |  gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg && apt-get update -y && apt-get install google-cloud-sdk -y
        mkdir -p /data/csv
        chmod -R 777 /data/csv

        echo "Step 2: Export old data to csv files"
        psql $ORAKL_DB_URL -t -c "SELECT tablename FROM pg_tables WHERE tablename LIKE 'data_%';" \
        | xargs -I {} psql $ORAKL_DB_URL -c "\copy {} to '/data/csv/{}.csv' WITH DELIMITER ',' CSV HEADER;"
        psql $DELEGATOR_DB_URL -t -c "SELECT tablename FROM pg_tables WHERE tablename LIKE 'transactions_%';" \
        | xargs -I {} psql $DELEGATOR_DB_URL -c "\copy {} to '/data/csv/{}.csv' WITH DELIMITER ',' CSV HEADER;"

        echo "Step 3: Upload all csv files to GCS bucket."
        gcloud storage cp /data/csv/*.csv gs://orakl-db-backup-cypress

        echo "Step 4: Delete old data tables"
        psql $ORAKL_DB_URL -t -c "SELECT tablename FROM pg_tables WHERE tablename LIKE 'data_%';" \
        | xargs -I {} psql $ORAKL_DB_URL -c "DROP TABLE {};"
        psql $DELEGATOR_DB_URL -t -c "SELECT tablename FROM pg_tables WHERE tablename LIKE 'transactions_%';" \
        | xargs -I {} psql $DELEGATOR_DB_URL -c "DROP TABLE {};"
    env:
      - name: ORAKL_DB_URL
        valueFrom:
          secretKeyRef:
            name: api-secrets
            key: DATABASE_URL 
      - name: DELEGATOR_DB_URL
        valueFrom:
          secretKeyRef:
            name: delegator-secrets 
            key: DATABASE_URL

  ###
  # Renew TLS certificate for `*.orakl.network` domain
  ###
  orakl-tls-renew:
    image:
      repository: debian
      tag: latest
      imagePullPolicy: IfNotPresent
    schedule: "0 0 1 */2 *"
    failedJobHistoryLimit: 3
    successfulJobHistoryLimit: 10
    concurrencyPolicy: Forbid 
    restartPolicy: Never 
    ttlSecondsAfterFinished: 30
    volumes:
      - name: orakl-tls-renew-volume
        gcePersistentDisk:
          pdName: orakl-tls-renew-disk
          fsType: ext4
    volumeMounts:
      - name: orakl-tls-renew-volume
        mountPath: /etc/letsencrypt
    namespace: orakl
    clusterRole:
      name: orakl-tls-renew
      rules:
        - apiGroups: ["apps"]
          resources: ["deployments"]
          verbs: ["get", "list"]
        - apiGroups: [""]
          resources: ["pods"]
          verbs: ["get", "list", "exec"]
        - apiGroups: [""]
          resources: ["secrets"]
          verbs: ["get", "list", "patch"]
        - apiGroups: [""]
          resources: ["pods/exec"]
          verbs: ["create"]
    command: ["/bin/bash"]
    args:
      - -c
      - |
        echo "Step 1: Install dependencies"
        apt -y update && apt -y install python3 python3-pip python3-venv
        python3 -m venv /certbot && /certbot/bin/pip3 install -U certbot-dns-godaddy
        apt-get install -y curl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        echo "Step 2: Renew TLS certificate"
        /certbot/bin/certbot renew \
        --authenticator dns-godaddy \
        --dns-godaddy-credentials ./credentials.ini \
        --dns-godaddy-propagation-seconds 900 \
        --keep-until-expiring --non-interactive --expand \
        --server https://acme-v02.api.letsencrypt.org/directory
        
        echo "Step 3: Export to Kubernetes secret"
        kubectl create secret tls orakl-backend-fe-tls \
        --cert=/etc/letsencrypt/live/orakl.network/cert.pem \
        --key=/etc/letsencrypt/live/orakl.network/privkey.pem \
        --dry-run=client -o yaml | kubectl apply -n orakl -f -

        sleep infinity
